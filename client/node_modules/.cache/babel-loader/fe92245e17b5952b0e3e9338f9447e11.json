{"ast":null,"code":"/** @format */\n// node_modules\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyCNTkpU6A0UZWEHjVilGCPIPZJj391kF0o',\n  authDomain: 'emall-db.firebaseapp.com',\n  databaseURL: 'https://emall-db.firebaseio.com',\n  projectId: 'emall-db',\n  storageBucket: 'emall-db.appspot.com',\n  messagingSenderId: '166910299301',\n  appId: '1:166910299301:web:a3ad1a92d27bce8cab514c',\n  measurementId: 'G-YR69PEHKMD'\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n/**\n * createUserProfileDocument():\n * Check if the user is in the firestore DB. If there is no documents\n * creates one.\n * @param: user\n **/\n\nexport const createUserProfileDocument = async user => {\n  if (!user) return '';\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = user;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt\n      });\n    } catch (error) {\n      console.error('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; // export const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n//   const collectionRef = firestore.collection(collectionKey);\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach((obj) => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n//   return batch.commit();\n// };\n\n/**\n *\n * @param collections\n */\n\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n/**\n * getCurrentUser():\n * Return a new promise that will resolve to a correct user value if there is one,\n * if there isn't, resolve us back null.\n */\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n/**\n *\n */\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport default firebase;","map":{"version":3,"sources":["/Users/max/react-course/emall/src/firebase/firebase.utils.ts"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","user","userRef","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","message","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["/** @format */\n\n// node_modules\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\ninterface collectionItemProps {\n  id: number;\n  name: string;\n  price: number;\n  imageUrl: string;\n}\n\ninterface collectionItemsProps {\n  id: string;\n  items: collectionItemProps[];\n  title: string;\n  routeName: string;\n}\n\nconst config = {\n  apiKey: 'AIzaSyCNTkpU6A0UZWEHjVilGCPIPZJj391kF0o',\n  authDomain: 'emall-db.firebaseapp.com',\n  databaseURL: 'https://emall-db.firebaseio.com',\n  projectId: 'emall-db',\n  storageBucket: 'emall-db.appspot.com',\n  messagingSenderId: '166910299301',\n  appId: '1:166910299301:web:a3ad1a92d27bce8cab514c',\n  measurementId: 'G-YR69PEHKMD',\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n/**\n * createUserProfileDocument():\n * Check if the user is in the firestore DB. If there is no documents\n * creates one.\n * @param: user\n **/\n\nexport const createUserProfileDocument = async (user: firebase.User) => {\n  if (!user) return '';\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = user;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n      });\n    } catch (error) {\n      console.error('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\n// export const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n//   const collectionRef = firestore.collection(collectionKey);\n\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach((obj) => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n\n//   return batch.commit();\n// };\n\n/**\n *\n * @param collections\n */\nexport const convertCollectionSnapshotToMap = (\n  collections: firebase.firestore.QuerySnapshot<\n    firebase.firestore.DocumentData\n  >,\n) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return transformedCollection.reduce(\n    (accumulator: { [index: string]: collectionItemsProps }, collection) => {\n      accumulator[collection.title.toLowerCase()] = collection;\n      return accumulator;\n    },\n    {},\n  );\n};\n\n/**\n * getCurrentUser():\n * Return a new promise that will resolve to a correct user value if there is one,\n * if there isn't, resolve us back null.\n */\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n/**\n *\n */\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}