{"ast":null,"code":"/** @format */\n// node_modules\nimport { takeLatest, put, all, call } from 'redux-saga/effects'; // Reduc actions + types\n\nimport { UserActionTypes } from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, registerSuccess, registerFailure } from './user.actions'; // Firebase utils\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n/**\n * getSnapshotFromUserAuth():\n *\n * Get the user reference object from createUserProfileDocument() using userAuth.\n * Then store the query snapshot into the redux state.\n *\n * @param userAuth\n */\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(userSnapshot.data()));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n/**\n * GoogleSignIn asynchronous event handler\n */\n\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n/**\n * EmailSignIn asynchronous event handler\n */\n\n\nfunction* signInWithEmail({\n  emailAndPasswordPayload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n/**\n * Sign out asynchronous event handler\n */\n\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\n\nfunction* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n/**\n * Register asynchronous event handler\n */\n\n\nfunction* register({\n  registerPayload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(registerSuccess());\n    yield getSnapshotFromUserAuth({ ...user,\n      displayName\n    });\n  } catch (error) {\n    yield put(registerFailure(error.message));\n  }\n}\n\nfunction* onRegisterStart() {\n  yield takeLatest(UserActionTypes.REGISTER_START, register);\n}\n/**\n * User session peristence asynchronous event handler\n */\n\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) yield;else {\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n/**\n * userSagas():\n * Run all of our user's start-sagas at once in one large saga\n */\n\n\nfunction* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onRegisterStart)]);\n}\n\nexport default userSagas;","map":{"version":3,"sources":["/Users/max/react-course/emall/client/src/redux/user/user.sagas.ts"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","registerSuccess","registerFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","data","error","message","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","emailAndPasswordPayload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","signOut","onSignOutStart","SIGN_OUT_START","register","registerPayload","displayName","createUserWithEmailAndPassword","onRegisterStart","REGISTER_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["/** @format */\n\n// node_modules\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\n\n// Reduc actions + types\nimport { UserActionTypes, UserActionProps } from './user.types';\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  registerSuccess,\n  registerFailure,\n} from './user.actions';\n\n// Firebase utils\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from '../../firebase/firebase.utils';\n\n/**\n * getSnapshotFromUserAuth():\n *\n * Get the user reference object from createUserProfileDocument() using userAuth.\n * Then store the query snapshot into the redux state.\n *\n * @param userAuth\n */\n\nfunction* getSnapshotFromUserAuth(userAuth: firebase.User) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(userSnapshot.data()));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\n/**\n * GoogleSignIn asynchronous event handler\n */\n\nfunction* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n/**\n * EmailSignIn asynchronous event handler\n */\n\nfunction* signInWithEmail({\n  emailAndPasswordPayload: { email, password },\n}: UserActionProps) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n/**\n * Sign out asynchronous event handler\n */\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\n\nfunction* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\n/**\n * Register asynchronous event handler\n */\n\nfunction* register({\n  registerPayload: { displayName, email, password },\n}: UserActionProps) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(registerSuccess());\n    yield getSnapshotFromUserAuth({ ...user, displayName });\n  } catch (error) {\n    yield put(registerFailure(error.message));\n  }\n}\n\nfunction* onRegisterStart() {\n  yield takeLatest(UserActionTypes.REGISTER_START, register);\n}\n\n/**\n * User session peristence asynchronous event handler\n */\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) yield;\n    else {\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n/**\n * userSagas():\n * Run all of our user's start-sagas at once in one large saga\n */\n\nfunction* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onRegisterStart),\n  ]);\n}\n\nexport default userSagas;\n"]},"metadata":{},"sourceType":"module"}