{"ast":null,"code":"/** @format */\n// node_modules\nimport { takeLatest, call, all, put } from 'redux-saga/effects'; // Reduc actions + types\n\nimport { ShopActionTypes } from './shop.types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'; // Firebase utils\n\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\n/**\n * fetch collection asynchronous event handler\n */\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\nfunction* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n/**\n * shopSagas():\n * Run all of our shop's start-sagas at once in one large saga\n */\n\n\nfunction* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n\nexport default shopSagas;","map":{"version":3,"sources":["/Users/max/react-course/emall/client/src/redux/shop/shop.sagas.ts"],"names":["takeLatest","call","all","put","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionSnapshotToMap","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA;AAEA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C,C,CAEA;;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP,C,CAKA;;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,+BAHP;AAKA;;;;AAIA,UAAUC,qBAAV,GAAkC;AAChC,MAAI;AACF,UAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMb,IAAI,CAACO,8BAAD,EAAiCI,QAAjC,CAAhC;AACA,UAAMT,GAAG,CAACE,uBAAuB,CAACS,aAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACG,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;;AAED,UAAUC,qBAAV,GAAkC;AAChC,QAAMjB,UAAU,CACdI,eAAe,CAACc,uBADF,EAEdT,qBAFc,CAAhB;AAID;AAED;;;;;;AAKA,UAAUU,SAAV,GAAsB;AACpB,QAAMjB,GAAG,CAAC,CAACD,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeE,SAAf","sourcesContent":["/** @format */\n\n// node_modules\nimport { takeLatest, call, all, put } from 'redux-saga/effects';\n\n// Reduc actions + types\nimport { ShopActionTypes } from './shop.types';\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from './shop.actions';\n\n// Firebase utils\nimport {\n  firestore,\n  convertCollectionSnapshotToMap,\n} from '../../firebase/firebase.utils';\n\n/**\n * fetch collection asynchronous event handler\n */\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\nfunction* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync,\n  );\n}\n\n/**\n * shopSagas():\n * Run all of our shop's start-sagas at once in one large saga\n */\n\nfunction* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n\nexport default shopSagas;\n"]},"metadata":{},"sourceType":"module"}